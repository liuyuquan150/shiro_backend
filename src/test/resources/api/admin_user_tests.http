# 官方文档: https://www.jetbrains.com/help/idea/javascript-specific-guidelines.html

# 测试描述: 用户权限与删除接口验证流程
# 本测试流程设计用于验证系统中不同角色用户的权限控制, 重点测试管理员与游客角色在执行删除用户操作时的权限限制.
#  1、创建用户
#   · 通过注册接口分别创建两个用户, 分别赋予角色 “管理员(SYSTEM_ADMINISTRATOR)” 和 “游客(GUEST)”
#  2、用户登录
#  3、删除用户权限测试
#   · 使用登录后获得的管理员身份信息, 调用删除用户接口, 尝试删除指定用户, 验证接口允许管理员成功执行删除操作.
#   · 使用登录后获得的游客身份信息, 再次调用删除用户接口, 尝试删除用户, 验证接口对游客权限的限制, 确认删除请求被拒绝或提示权限不足.

### 用户注册 - 管理员

< {%
    import {generateUsername, generateChinesePhoneNumber} from "./utils";

    client.global.set("adminUsername", generateUsername());
    client.global.set("adminPassword", "admin12138");
    client.global.set("adminPhone", generateChinesePhoneNumber());

%}

POST {{baseUrl}}/api/v1/register
Content-Type: application/json

{
  "username": "{{adminUsername}}",
  "password": "{{adminPassword}}",
  "phoneNumber" : "{{adminPhone}}",
  "role": "SYSTEM_ADMINISTRATOR"
}

> {%
    client.test("", function() {
        client.assert(response.status === 200, "管理员注册失败");
    });
%}

### 用户登录 - 管理员, 方式: 用户名密码
POST http://localhost:80/api/v1/login
Content-Type: application/json

{
  "username": "{{adminUsername}}",
  "password": "{{adminPassword}}",
  "rememberMe": true,
  "loginType": "USERNAME_PASSWORD"
}

> {%
    client.test("", function() {
        client.assert(response.status === 200, "管理员登录失败");

        client.log(JSON.stringify(response.body, null, 2));
        /*
            JetBrains HTTP Client 的 client.global.set() 实际只支持字符串类型的全局变量, 不支持真正的 JavaScript 对象持久存储.

            JetBrains HTTP Client 的变量存储机制:
                - 所有通过 client.global.set(key, value) 存储的值, 最终会被序列化为字符串保存;
                - 如果你传入一个对象, 它其实会变成字符串 "[object Object]" (这是 JS 默认的 Object.toString());
                - 所以后续你用 get("user") 得到的其实是 "[object Object]"，不是原始对象, 当然访问不了 user["username"].

            JetBrains 的 HTTP Client 变量机制只保证字符串值可以被跨请求使用. 对象/数组不是第一类支持的数据类型, 需要你显式序列化/反序列化.
         */
        client.global.set("adminUser", JSON.stringify(response.body["data"]));
    });
%}

### 管理员尝试删除用户
< {%
    const userJSON = client.global.get("adminUser");
    const user = JSON.parse(userJSON);
    client.log(user["username"])
%}

POST http://localhost:80/api/v1/user/del?userId=888
Content-Type: application/x-www-form-urlencoded

> {%
    client.test("", function() {
        client.assert(response.status === 200, "管理员删除用户失败");
    });
%}